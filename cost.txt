        
#practical no.1:basic commands in R


        
#1.creating vector

      data<-c(1,"IT",120)
      print(data)
      
      
#2.creating list 

      #a
      data<-list(1,"IT",120)
      print(data)
       #b
      data<-list(1,c("cost","cga","java"),120)
      print(data)
      
      
#3.creating matrices

      #a
      data<-matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow=TRUE)
      print(data)
      
      #b
      data<-matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow=FALSE)
      print(data)
      
      #c
      data<-array(c(1,2,3,4,5,6,7,8,9),dim=c(4,4,2))
      print(data)
      
      
#4.creating data frames.

      data<-data.frame(
        SR.NO=c(1,2,3,4,5),
        NAME=c("A","B","C","D","E"),
        AGE=c(18,19,20,21,22)
      )
      print(data)
      
      
#6.Mathematical Operation in R

      #a
      A=c(2,4,6,8,10)
      B=c(1,3,5,7,9)
      sum=A+B
      cat("Addition is",sum)
      #b
      A=c(2,4,6,8,10)
      B=c(1,3,5,7,9)
      sum=A^B
      cat("Addition is",sum)    

    
#Practical no.2:create a matrix using R and perform the operation

      
#1.addition

      matrices1 <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3,byrow=TRUE)
      matrices2 <- matrix(c(9, 8, 7, 6, 5, 4, 3, 2, 1), nrow = 3, ncol = 3,byrow=TRUE)
      print(matrices1)
      print(matrices2)
      add <- matrices1 + matrices2
      print(add)
                                                                                                
      
#2.substract

      matrices1 <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3,byrow=TRUE)
      matrices2 <- matrix(c(9, 8, 7, 6, 5, 4, 3, 2, 1), nrow = 3, ncol = 3,byrow=TRUE)
      print(matrices1)
      print(matrices2)
      diff <- matrices1 - matrices2
      print(diff)
      
      
#3.multiply

      matrices1 <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3,byrow=TRUE)
      matrices2 <- matrix(c(9, 8, 7, 6, 5, 4, 3, 2, 1), nrow = 3, ncol = 3,byrow=TRUE)
      print(matrices1)
      print(matrices2)
      product <- matrices1 * matrices2
      print(product)
      
      
#4.transpose

      matrices1 <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3,byrow=TRUE)
      matrices2 <- matrix(c(9, 8, 7, 6, 5, 4, 3, 2, 1), nrow = 3, ncol = 3,byrow=TRUE)
      print(matrices1)
      print(matrices2)
      transpose <- t(matrices1)
      print(transpose)
      
      
#5.inverse

      matrices1 <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2,byrow=TRUE)
      print(matrices1)
      inverse <- solve(matrices1)
      print(inverse)
      
      
    
#practical 3(A):using R execute the statical function

    
#1.mean

      data<-c(2,4,5,6,8,5)
      find_mean<-mean(data)
      print(data)
      cat("mean is",find_mean)
      
      
#2.median

      data<-c(2,4,5,6,8,5)
      find_median<-median(data)
      print(data)
      cat("median is",find_median)
      
      
 #3.quartile

      data<-c(2,4,5,6,8,5)
      quartile<-quantile(data,probs=c(0.25))
      print(data)
      cat("value of  Q1 & Q2",quartile)
      
      
#4.inter quartile Range

      data<-c(2,4,5,6,8,5)
      find_IQR<-IQR(data)
      print(data)
      cat("ANSWER IS",find_IQR)   
      
#5.mode

      find_mode <- function(x) {
      unique_value <- unique(x) # Get unique values
      unique_value[which.max(tabulate(match(x, unique_value)))] # Find the mode
      }
      x <- c(2, 4, 5, 6, 8, 5)
      mode <- find_mode(x)
      cat("The answer is", mode)

      
#practical 3B :using R import data from execl & perform the foll.stars.functions:

      

      
# Finding mean 

install.packages("readxl")
library(readxl)

path <- read_excel("C:/Users/yadav/OneDrive/Desktop/my projects/Book1.xlsx") 
head(path)

find_mean <- mean(path$y)  
cat("mean is", find_mean)



#median

install.packages("readxl")
library(readxl)
path<-read_excel("C:/Users/yadav/OneDrive/Desktop/my projects/Book1.xlsx")
head(path)
find_median<-median(path$y)
cat("median is",find_median)


#Quartile

install.packages("readxl")
library(readxl)
path<-read_excel("C:/Users/yadav/OneDrive/Desktop/my projects/Book1.xlsx")
head(path)
find_quartile <- quantile(path$y)
cat("Quartiles are", find_quartile)


#range

install.packages("readxl")
library(readxl)
path<-read_excel("C:/Users/yadav/OneDrive/Desktop/my projects/Book1.xlsx")
head(path)
find_range <- range(path$y)
cat("Range are", find_range)


#IQR

install.packages("readxl")
library(readxl)
path<-read_excel("C:/Users/yadav/OneDrive/Desktop/my projects/Book1.xlsx")
head(path)
find_IQR <- IQR(path$y)
cat("IQR are", find_IQR)


#practical no.4 using R import the data from Excel file & calculate the following


#1.variance

install.packages("readxl")
library(readxl)
path<-read_excel("C:/Users/yadav/OneDrive/Desktop/my projects/Book1.xlsx")
head(path)
find_variance<-var(path$y)
cat("variance is",find_variance)


#2.standard deviation

library(readxl)
path<-read_excel("C:/Users/yadav/OneDrive/Desktop/my projects/Book1.xlsx")
head(path)
find_standarddeviation<-sd(path$x)
cat("standard deviation is",find_standarddeviation)



#3.co-variance

library(readxl)
path<-read_excel("C:/Users/yadav/OneDrive/Desktop/my projects/Book1.xlsx")
head(path)
find_covariance<-cov(path$x,path$y)
cat("co_variance is",find_covariance)

      
# Practical No. 5:

      
 Import data from Excel and draw the skewness

install.packages("readxl")
install.packages("e1071")
install.packages("ggplot2")
library(readxl)
library(e1071)
library(ggplot2)
path <- read_excel("C:/Users/yadav/OneDrive/Desktop/my projects/Book1.xlsx")
head(path)
skew_data <- skewness(path$y)
cat("Answer is:", skew_data)
ggplot(path, aes(x = y)) + geom_histogram(aes(y = ..density..), bins = 50, fill = 'orange', alpha = 0.5) + 
  geom_density(color = 'red', size = 1) +
  ggtitle(paste("Skewness:", round(skew_data, 2)))

 
      
#practical no.6:

    
using R perform bionomial & Normal Distribution on the dat:

        
#Binomial distribution

            
#Q.find the probability of exactly 3 success H is 5 trials with success probability 0.5

      x<-pbinom(3,size=5,prob=0.5)
      print(x)
      
      
#using pmf

      x <- dbinom(3, size = 5, prob = 0.5)
      print(x)
      
      
#using cdf

      y <- pbinom(3, size = 5, prob = 0.5)
      print(y)
      
      
#2.Normal disrtibution  

      
#Q.2calculate the pdf of standard normal distribution with mean=5,sd=2,x=3

        
#using pmf

      data <- dnorm(3,mean= 5, sd = 2)
      print(data)
      
      
#cdf

      data <- pnorm(3,mean= 5, sd = 2)
      print(data)
      
     
 #Q.3 calculate to random 15 numbers from the normal distribution with mean=10 and sd=2

      data <- rnorm(15,mean= 10, sd = 2)
      print(data)
    